{
    "identifier": "word_search",
    "prompts": [
        {
            "prompt_id": "16",
            "prompt": "Given a 2D board and a word, determine if the word can be constructed from the letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "board": "[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']]",
                        "word": "ABCCED"
                    },
                    "expected_output": [
                        "True"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "word_search",
        "parameters": [
            {
                "name": "board",
                "type": "List[List[str]]"
            },
            {
                "name": "word",
                "type": "str"
            }
        ],
        "return_values": [
            {
                "type": "bool"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "board": "[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']]",
                "word": "ABCCED"
            },
            "expected_output": [
                "True"
            ]
        },
        {
            "input": {
                "board": "[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']]",
                "word": "SEE"
            },
            "expected_output": [
                "True"
            ]
        },
        {
            "input": {
                "board": "[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']]",
                "word": "ABCB"
            },
            "expected_output": [
                "False"
            ]
        }
    ],
    "optimal_solution": "def word_search(board: list[list[str]], word: str) -> bool:\n    if not board:\n        return False\n\n    def dfs(board, word, i, j, k):\n        if not (0 <= i < len(board)) or not (0 <= j < len(board[0])) or board[i][j] != word[k]:\n            return False\n        if k == len(word) - 1:\n            return True\n        tmp, board[i][j] = board[i][j], '/'\n        res = dfs(board, word, i+1, j, k+1) or dfs(board, word, i-1, j, k+1) or dfs(board, word, i, j+1, k+1) or dfs(board, word, i, j-1, k+1)\n        board[i][j] = tmp\n        return res\n\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if dfs(board, word, i, j, 0):\n                return True\n    return False"
}