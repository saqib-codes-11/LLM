{
    "identifier": "num_islands_ii",
    "prompts": [
        {
            "prompt_id": "50",
            "prompt": "A 2D grid map consists of '1's (land) and '0's (water) and an array of positions where we would like to build a new island (turn '0' into '1'). After each addLand operation, return the number of islands.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "m": "3",
                        "n": "3",
                        "positions": "[[0,0],[0,1],[1,2],[2,1]]"
                    },
                    "expected_output": [
                        "[1,1,2,3]"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "num_islands_ii",
        "parameters": [
            {
                "name": "m",
                "type": "int"
            },
            {
                "name": "n",
                "type": "int"
            },
            {
                "name": "positions",
                "type": "List[List[int]]"
            }
        ],
        "return_values": [
            {
                "type": "List[int]"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "m": "3",
                "n": "3",
                "positions": "[[0,0],[0,1],[1,2],[2,1]]"
            },
            "expected_output": [
                "[1,1,2,3]"
            ]
        }
    ],
    "optimal_solution": "def num_islands_ii(m: int, n: int, positions: List[List[int]]) -> List[int]:\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    \n    directions = [(1,0), (-1,0), (0,1), (0,-1)]\n    result = []\n    islands = 0\n    grid = [[0 for _ in range(n)] for _ in range(m)]\n    parent = {}\n    \n    for i, j in positions:\n        if grid[i][j] == 0:\n            grid[i][j] = 1\n            islands += 1\n            parent[(i,j)] = (i,j)\n            for x, y in directions:\n                ni, nj = i + x, j + y\n                if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] == 1:\n                    p1, p2 = find((i,j)), find((ni,nj))\n                    if p1 != p2:\n                        parent[p1] = p2\n                        islands -= 1\n        result.append(islands)\n    \n    return result"
}