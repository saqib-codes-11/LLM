{
    "identifier": "merge_intervals",
    "prompts": [
        {
            "prompt_id": "28",
            "prompt": "Given a collection of intervals, merge any overlapping intervals.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "intervals": "[[1,3],[2,6],[8,10],[15,18]]"
                    },
                    "expected_output": [
                        "[[1,6],[8,10],[15,18]]"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "merge_intervals",
        "parameters": [
            {
                "name": "intervals",
                "type": "List[List[int]]"
            }
        ],
        "return_values": [
            {
                "type": "List[List[int]]"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "intervals": "[[1,3],[2,6],[8,10],[15,18]]"
            },
            "expected_output": [
                "[[1,6],[8,10],[15,18]]"
            ]
        },
        {
            "input": {
                "intervals": "[[1,4],[4,5]]"
            },
            "expected_output": [
                "[[1,5]]"
            ]
        }
    ],
    "optimal_solution": "def merge_intervals(intervals: list[list[int]]) -> list[list[int]]:\n    if not intervals:\n        return []\n\n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n\n    for i in range(1, len(intervals)):\n        current_interval = intervals[i]\n        last_interval = merged[-1]\n\n        if current_interval[0] <= last_interval[1]:\n            last_interval[1] = max(last_interval[1], current_interval[1])\n        else:\n            merged.append(current_interval)\n\n    return merged"
}