{
    "identifier": "max_subarray_difference",
    "prompts": [
        {
            "prompt_id": "32",
            "prompt": "Given an array with integers, find two non-overlapping subarrays A and B, which |sum(A) - sum(B)| is the largest. Return the largest difference.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "nums": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]"
                    },
                    "expected_output": [
                        "15"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "max_subarray_diff",
        "parameters": [
            {
                "name": "nums",
                "type": "List[int]"
            }
        ],
        "return_values": [
            {
                "type": "int"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "nums": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]"
            },
            "expected_output": [
                "11"
            ]
        },
        {
            "input": {
                "nums": "[1,2,3,-1,-2,-3,1]"
            },
            "expected_output": [
                "12"
            ]
        },
        {
            "input": {
                "nums": "[1,-1,1,-1]"
            },
            "expected_output": [
                "2"
            ]
        }
    ],
    "optimal_solution": "def max_subarray_diff(nums: List[int]) -> int:\n    n = len(nums)\n    max_from_start, min_from_start = [nums[0]], [nums[0]]\n    max_sum, min_sum = nums[0], nums[0]\n    curr_max_sum, curr_min_sum = nums[0], nums[0]\n    for i in range(1, n):\n        curr_max_sum = max(nums[i], curr_max_sum + nums[i])\n        curr_min_sum = min(nums[i], curr_min_sum + nums[i])\n        max_sum = max(max_sum, curr_max_sum)\n        min_sum = min(min_sum, curr_min_sum)\n        max_from_start.append(max_sum)\n        min_from_start.append(min_sum)\n\n    max_from_end, min_from_end = [nums[-1]], [nums[-1]]\n    max_sum, min_sum = nums[-1], nums[-1]\n    curr_max_sum, curr_min_sum = nums[-1], nums[-1]\n    for i in range(n-2, -1, -1):\n        curr_max_sum = max(nums[i], curr_max_sum + nums[i])\n        curr_min_sum = min(nums[i], curr_min_sum + nums[i])\n        max_sum = max(max_sum, curr_max_sum)\n        min_sum = min(min_sum, curr_min_sum)\n        max_from_end.append(max_sum)\n        min_from_end.append(min_sum)\n    max_from_end.reverse()\n    min_from_end.reverse()\n\n    max_diff = 0\n    for i in range(n-1):\n        max_diff = max(max_diff, abs(max_from_start[i] - min_from_end[i+1]))\n        max_diff = max(max_diff, abs(min_from_start[i] - max_from_end[i+1]))\n\n    return max_diff\n"
}