{
    "identifier": "max_size_subarray_sum_equals_k",
    "prompts": [
        {
            "prompt_id": "48",
            "prompt": "Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "nums": "[1,-1,5,-2,3]",
                        "k": "3"
                    },
                    "expected_output": [
                        "4"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "max_sub_array_len",
        "parameters": [
            {
                "name": "nums",
                "type": "List[int]"
            },
            {
                "name": "k",
                "type": "int"
            }
        ],
        "return_values": [
            {
                "type": "int"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "nums": "[1,-1,5,-2,3]",
                "k": "3"
            },
            "expected_output": [
                "4"
            ]
        },
        {
            "input": {
                "nums": "[-2,-1,2,1]",
                "k": "1"
            },
            "expected_output": [
                "2"
            ]
        }
    ],
    "optimal_solution": "def max_sub_array_len(nums: List[int], k: int) -> int:\n    sum_map = {0: -1}\n    total_sum = 0\n    max_len = 0\n    \n    for i, num in enumerate(nums):\n        total_sum += num\n        if total_sum - k in sum_map:\n            max_len = max(max_len, i - sum_map[total_sum - k])\n        if total_sum not in sum_map:\n            sum_map[total_sum] = i\n    \n    return max_len"
}