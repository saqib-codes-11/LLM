{
    "identifier": "max_subarray_sum_with_one_deletion",
    "prompts": [
        {
            "prompt_id": "32",
            "prompt": "Given an array of integers, you need to find one element of the array to delete in which the sum of the remaining numbers is maximum.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "arr": "[1,-2,0,3]"
                    },
                    "expected_output": [
                        "4"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "maximumSum",
        "parameters": [
            {
                "name": "arr",
                "type": "List[int]"
            }
        ],
        "return_values": [
            {
                "type": "int"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "arr": "[1,-2,0,3]"
            },
            "expected_output": [
                "4"
            ]
        },
        {
            "input": {
                "arr": "[1,-2,-2,3]"
            },
            "expected_output": [
                "3"
            ]
        },
        {
            "input": {
                "arr": "[-1,-1,-1,-1]"
            },
            "expected_output": [
                "-1"
            ]
        }
    ],
    "optimal_solution": "def maximumSum(arr: list[int]) -> int:\n    n = len(arr)\n    forward = [0] * n\n    backward = [0] * n\n    curr_max, max_so_far = arr[0], arr[0]\n    forward[0] = arr[0]\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        forward[i] = curr_max\n    curr_max, max_so_far = arr[-1], arr[-1]\n    backward[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        curr_max = max(arr[i], curr_max + arr[i])\n        backward[i] = curr_max\n    for i in range(1, n - 1):\n        max_so_far = max(max_so_far, forward[i - 1] + backward[i + 1])\n    return max_so_far"
}