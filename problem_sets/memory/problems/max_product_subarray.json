{
    "identifier": "max_product_subarray",
    "prompts": [
        {
            "prompt_id": "47",
            "prompt": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "nums": "[-2,0,-1]"
                    },
                    "expected_output": [
                        "0"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "max_product",
        "parameters": [
            {
                "name": "nums",
                "type": "List[int]"
            }
        ],
        "return_values": [
            {
                "type": "int"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "nums": "[-2,0,-1]"
            },
            "expected_output": [
                "0"
            ]
        },
        {
            "input": {
                "nums": "[-2,3,-4]"
            },
            "expected_output": [
                "24"
            ]
        },
        {
            "input": {
                "nums": "[2,3,-2,4]"
            },
            "expected_output": [
                "6"
            ]
        }
    ],
    "optimal_solution": "def max_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n\n    max_prod = nums[0]\n    min_val, max_val = nums[0], nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            min_val, max_val = max_val, min_val\n        max_val = max(nums[i], max_val * nums[i])\n        min_val = min(nums[i], min_val * nums[i])\n        \n        max_prod = max(max_prod, max_val)\n    \n    return max_prod"
}