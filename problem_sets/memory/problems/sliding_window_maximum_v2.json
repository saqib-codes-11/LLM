{
    "identifier": "sliding_window_maximum_v2",
    "prompts": [
        {
            "prompt_id": "29",
            "prompt": "Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "nums": "[1,3,-1,-3,5,3,6,7]",
                        "k": "3"
                    },
                    "expected_output": [
                        "[3,3,5,5,6,7]"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "max_sliding_window",
        "parameters": [
            {
                "name": "nums",
                "type": "List[int]"
            },
            {
                "name": "k",
                "type": "int"
            }
        ],
        "return_values": [
            {
                "type": "List[int]"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "nums": "[1,3,-1,-3,5,3,6,7]",
                "k": "3"
            },
            "expected_output": [
                "[3,3,5,5,6,7]"
            ]
        },
        {
            "input": {
                "nums": "[1]",
                "k": "1"
            },
            "expected_output": [
                "[1]"
            ]
        }
    ],
    "optimal_solution": "def max_sliding_window(nums: list[int], k: int) -> list[int]:\n    if not nums:\n        return []\n\n    if k == 1:\n        return nums\n\n    from collections import deque\n    deq = deque()\n    max_idx = 0\n\n    for i in range(k):\n        while deq and nums[i] >= nums[deq[-1]]:\n            deq.pop()\n        deq.append(i)\n        if nums[i] > nums[max_idx]:\n            max_idx = i\n\n    result = [nums[max_idx]]\n\n    for i in range(k, len(nums)):\n        while deq and deq[0] < i - k + 1:\n            deq.popleft()\n        while deq and nums[i] >= nums[deq[-1]]:\n            deq.pop()\n        deq.append(i)\n        result.append(nums[deq[0]])\n\n    return result"
}