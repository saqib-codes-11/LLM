{
    "identifier": "longest_repeated_substring",
    "prompts": [
        {
            "prompt_id": "30",
            "prompt": "Given a string 's', find out the length of the longest repeating substring(s). Return 0 if no repeating substring exists.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "s": "banana"
                    },
                    "expected_output": [
                        "3"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "longest_repeated_substring_length",
        "parameters": [
            {
                "name": "s",
                "type": "str"
            }
        ],
        "return_values": [
            {
                "type": "int"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "s": "banana"
            },
            "expected_output": [
                "3"
            ]
        },
        {
            "input": {
                "s": "abcd"
            },
            "expected_output": [
                "0"
            ]
        }
    ],
    "optimal_solution": "def longest_repeated_substring_length(s: str) -> int:\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    res = 0\n    \n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if s[i - 1] == s[j - 1] and (i + dp[i-1][j-1] <= j):\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                res = max(res, dp[i][j])\n            else:\n                dp[i][j] = 0\n                \n    return res"
}