{
    "identifier": "next_permutation",
    "prompts": [
        {
            "prompt_id": "31",
            "prompt": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "nums": "[1,2,3]"
                    },
                    "expected_output": ["[1,3,2]"]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "next_permute",
        "parameters": [
            {
                "name": "nums",
                "type": "List[int]"
            }
        ],
        "return_values": [
            {
                "type": "List[int]"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "nums": "[1,2,3]"
            },
            "expected_output": ["[1,3,2]"]
        },
        {
            "input": {
                "nums": "[3,2,1]"
            },
            "expected_output": ["[1,2,3]"]
        },
        {
            "input": {
                "nums": "[1,1,5]"
            },
            "expected_output": ["[1,5,1]"]
        }
    ],
    "optimal_solution": "def next_permute(nums: list[int]) -> list[int]:\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n\n    if i >= 0:\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n\n    left, right = i + 1, len(nums) - 1\n    while left < right:\n        nums[left], nums[right] = nums[right], nums[left]\n        left += 1\n        right -= 1\n\n    return nums"
}