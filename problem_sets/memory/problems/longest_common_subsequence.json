{
    "identifier": "longest_common_subsequence",
    "prompts": [
        {
            "prompt_id": "28",
            "prompt": "Given two strings text1 and text2, return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "text1": "abcde",
                        "text2": "ace"
                    },
                    "expected_output": [
                        "3"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "longest_common_subsequence",
        "parameters": [
            {
                "name": "text1",
                "type": "str"
            },
            {
                "name": "text2",
                "type": "str"
            }
        ],
        "return_values": [
            {
                "type": "int"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "text1": "abcde",
                "text2": "ace"
            },
            "expected_output": [
                "3"
            ]
        },
        {
            "input": {
                "text1": "abc",
                "text2": "abc"
            },
            "expected_output": [
                "3"
            ]
        },
        {
            "input": {
                "text1": "abc",
                "text2": "def"
            },
            "expected_output": [
                "0"
            ]
        }
    ],
    "optimal_solution": "def longest_common_subsequence(text1: str, text2: str) -> int:\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]"
}