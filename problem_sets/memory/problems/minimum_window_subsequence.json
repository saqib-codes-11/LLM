{
    "identifier": "minimum_window_subsequence",
    "prompts": [
        {
            "prompt_id": "29",
            "prompt": "Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W. If there is no such window in S that covers all characters in T, return the empty string ''. If there are multiple such minimum-length windows, return the one with the left-most starting index.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "S": "abcdebdde",
                        "T": "bde"
                    },
                    "expected_output": [
                        "bcde"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "minimum_window_subsequence",
        "parameters": [
            {
                "name": "S",
                "type": "str"
            },
            {
                "name": "T",
                "type": "str"
            }
        ],
        "return_values": [
            {
                "type": "str"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "S": "abcdebdde",
                "T": "bde"
            },
            "expected_output": [
                "bcde"
            ]
        },
        {
            "input": {
                "S": "jmeqksfrsdcmsiwvaovztaqenprznnlfnrvxwz",
                "T": "u"
            },
            "expected_output": [
                ""
            ]
        }
    ],
    "optimal_solution": "def minimum_window_subsequence(S: str, T: str) -> str:\n    m, n = len(S), len(T)\n    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = i + 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if S[i - 1] == T[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    start, length = 0, float('inf')\n    for i in range(1, m + 1):\n        if dp[i][-1] != float('inf'):\n            if i - dp[i][-1] + 1 < length:\n                start = dp[i][-1] - 1\n                length = i - dp[i][-1] + 1\n    return '' if length == float('inf') else S[start:start+length]"
}